################################################################################
#
# RevBayes Example: Bayesian inference of phylogeny using a Jukes-Cantor model
# 
# This file: Runs the full MCMC on a single gene under the Jukes-Cantor 
#            substitution model using a rooted (birth-death) tree model.
#
# authors: Sebastian Hoehna, Tracy A. Heath, Michael Landis and Brian R. Moore
#
################################################################################

#######################
# Reading in the Data #
#######################

###### This just defines a single model for all sites #######

### Read in sequence data for both genes

data <- readDiscreteCharacterData("data/primates_cytb.nex")

# Get some useful variables from the data. We need these later on.
n_species <- data.ntaxa()
taxa <- data.taxa()

# set my move index
mvi = 0
mni = 0



######################
# Substitution Model #
######################

#### specify the GTR+G substitution model applied uniformly to all sites ###
er_prior <- v(1,1,1,1,1,1)
er ~ dnDirichlet(er_prior)
moves[++mvi] = mvSimplexElementScale(er,weight=3)


pi_prior <- v(1,1,1,1) 
pi ~ dnDirichlet(pi_prior)
moves[++mvi] = mvSimplexElementScale(pi,weight=2)


#### create a deterministic variable for the rate matrix ####
Q := fnGTR(er,pi) 


#############################
# Among Site Rate Variation #
#############################

alpha_prior_mean <- 5.0
alpha_prior_sd <- 0.587405
alpha ~ dnLognormal( alpha_prior_mean, alpha_prior_sd )
gamma_rates := fnDiscretizeGamma( alpha, alpha, 4, false )

# add moves for the stationary frequencies, exchangeability rates and the shape parameter
moves[++mvi] = mvScale(alpha,weight=2)


pinvar ~ dnBeta(1,1)
moves[++mvi] = mvSlide(pinvar)


##############
# Tree model #
##############

### the BDP is conditioned on the root time
### here we fix it to 90 million year ago
root_time <- 90

### the birth rate is a stochastic random variable drawn from a lognormal prior
### MCMC samples this variable using a scale proposal
diversification_mean <- ln( ln(450.0/2.0) / root_time )
diversification_sd <- 0.587405
diversification ~ dnLognormal(mean=diversification_mean,sd=diversification_sd) 
moves[++mvi] = mvScale(diversification,lambda=1.0,tune=true,weight=3.0)

turnover_mean <- ln( ln(450.0/2.0) / root_time )
turnover_sd <- 0.587405*2
turnover ~ dnLognormal(mean=turnover_mean,sd=turnover_sd) 
moves[++mvi] = mvScale(turnover,lambda=1.0,tune=true,weight=3.0)

### Transform the parameters
birth_rate := diversification + turnover
death_rate := turnover

### rho is the probability of sampling species at the present
### fix this to 23/450, since there are ~450 described species of primates
### and we have sampled 23
rho <- n_species/450

### the time tree is a stochastic node modeled by the constant rate birth-death process (dnBDP)
psi ~ dnBDP(lambda=birth_rate, mu=death_rate, rho=rho, rootAge=root_time, samplingStrategy="uniform", condition="survival", taxa=taxa)

moves[++mvi] = mvNarrow(psi, weight=5.0)
moves[++mvi] = mvNNI(psi, weight=1.0)
moves[++mvi] = mvFNPR(psi, weight=3.0)
moves[++mvi] = mvGPR(psi, weight=3.0)
moves[++mvi] = mvSubtreeScale(psi, weight=3.0)
moves[++mvi] = mvNodeTimeSlideUniform(psi, weight=15.0)




###################
# Molecular clock #
###################

### We know from empirical estimates a clock rate which is 0.01 (=1%) per million years per site
### Nevertheless, we will estimate it here because we fixed the root age
### we use a uniform prior on the log-transform clock rate
log_clock_rate ~ dnUniform(-8,2)
moves[++mvi] = mvSlide(log_clock_rate, weight=2.0)
clock_rate := 10^log_clock_rate



###################
# PhyloCTMC Model #
###################

# the sequence evolution model
seq ~ dnPhyloCTMC(tree=psi, Q=Q, branchRates=clock_rate, siteRates=gamma_rates, pInv=pinvar, type="DNA")

# attach the data
seq.clamp(data)




#############
# THE Model #
#############

# We define our model.
# We can use any node of our model as a handle, here we chose to use the rate matrix.
mymodel = model(Q)






monitors[++mni] = mnModel(filename="output/primates_cytb_GTR_Gamma_Inv.log",printgen=10, separator = TAB)
monitors[++mni] = mnFile(filename="output/primates_cytb_GTR_Gamma_Inv.trees",printgen=10, separator = TAB, psi)
monitors[++mni] = mnScreen(printgen=1000, clock_rate, diversification, turnover)



### Compute power posterior distributions
pow_p = powerPosterior(mymodel, moves, monitors, "output/pow_p_GTR_Gamma_Inv.out", cats=127, sampleFreq=10) 
pow_p.burnin(generations=10000,tuningInterval=250)
pow_p.run(generations=1000)  

### Use stepping-stone sampling to calculate marginal likelihoods
ss = steppingStoneSampler(file="output/pow_p_GTR_Gamma_Inv.out", powerColumnName="power", likelihoodColumnName="likelihood")
ss.marginal() 

### Use path-sampling to calculate marginal likelihoods
ps = pathSampler(file="output/pow_p_GTR_Gamma_Inv.out", powerColumnName="power", likelihoodColumnName="likelihood")
ps.marginal() 

# you may want to quit RevBayes now
q()

